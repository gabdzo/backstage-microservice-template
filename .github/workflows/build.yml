name: Build and Push Docker Image to ECR

on:
  workflow_call:
    inputs:
      env:
        description: 'Environment to deploy to'
        required: true
        type: string
           

# Set permissions for OpenID connect
permissions:
    id-token: write # This is required for requesting the JWT
    contents: read  # This is required for actions/checkout
    
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.env }}

    concurrency:
        group: build
        cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Yarn Classic
        run: npm install -g yarn@1
      
      - name: Get timestamp & commit
        id: create-image-uid
        run: |
            echo "timestamp=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_OUTPUT
            echo "commit-hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Cache Yarn dependencies
        id: yarn-cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-  

      - name: Run yarn install
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        working-directory: backstage
        run: |
            yarn install --immutable

      - name: Build backend
        working-directory: backstage
        run: |
            yarn tsc
            yarn build:backend --config ../../app-config.yaml --config ../../app-config.production.yaml
        
      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        working-directory: backstage
        env:
            ECR_REGISTRY: 005669471820.dkr.ecr.eu-central-1.amazonaws.com
            ECR_REPOSITORY: showcase
            IMAGE_TAG: backstage-${{ steps.create-image-uid.outputs.commit-hash }}-${{ steps.create-image-uid.outputs.timestamp }}
        run: |
            docker image build . -f packages/backend/Dockerfile --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
    
      - name: Create image URI file
        run: echo $IMAGE_URI > image-uri.txt

      - name: Upload image URI artifact
        uses: actions/upload-artifact@v4
        with:
            name: image-uri
            path: image-uri.txt